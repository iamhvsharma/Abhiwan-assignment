generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MANAGER
  TEAM
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id                String         @id @default(uuid())
  name              String
  email             String         @unique
  password          String
  role              Role
  tasks             Task[]         @relation("AssignedTasks")
  notes             ProgressNote[]
  createdAt         DateTime       @default(now())
  Task              Task[]
  managedWorkspaces Workspace[]    @relation("WorkspaceManager")
  workspaces        Workspace[]    @relation("WorkspaceMembers") // Many-to-many
}

model Workspace {
  id              String   @id @default(uuid())
  workspaceNumber Int      @unique // New unique attribute for sockets and API
  name            String
  createdBy       String
  manager         User     @relation("WorkspaceManager", fields: [createdBy], references: [id])
  members         User[]   @relation("WorkspaceMembers") // Many-to-many
  tasks           Task[]
  createdAt       DateTime @default(now())
}

model Task {
  id           String         @id @default(uuid())
  title        String
  description  String
  status       TaskStatus     @default(PENDING)
  assignedToId String
  assignedTo   User           @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdById  String
  creator      User           @relation(fields: [createdById], references: [id])
  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id])
  notes        ProgressNote[]
  createdAt    DateTime       @default(now())
}

model ProgressNote {
  id        String   @id @default(uuid())
  note      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
}
